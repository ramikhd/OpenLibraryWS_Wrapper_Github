# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Deplace to project
      run: cd Sources
    - name: Restore dependencies 
      run: |
        cd Sources
        dotnet restore OpenLibraryWS_Wrapper.sln
    - name: Build
      run: |
        cd Sources
        dotnet build OpenLibraryWS_Wrapper.sln -c Release --no-restore
    - name: Publish 
      run:  |
        cd Sources     
        dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o ./build/release
  
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Deplace to project
      run: cd Sources
    - name: Restore dependencies 
      run: |
        cd Sources
        dotnet restore OpenLibraryWS_Wrapper.sln
    - name: Test
      run: |
        cd Sources
        dotnet test OpenLibraryWS_Wrapper.sln --no-restore
    needs: build
  
  code-inspection:
       runs-on: windows-latest
       steps:
          - name: Set up JDK 11
            uses: actions/setup-java@v1
            with:
              java-version: 1.11
          - uses: actions/checkout@v2
            with:
              fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          - name: Cache SonarQube packages
            uses: actions/cache@v1
            with:
              path: ~\sonar\cache
              key: ${{ runner.os }}-sonar
              restore-keys: ${{ runner.os }}-sonar
          - name: Cache SonarQube scanner
            id: cache-sonar-scanner
            uses: actions/cache@v1
            with:
              path: .\.sonar\scanner
              key: ${{ runner.os }}-sonar-scanner
              restore-keys: ${{ runner.os }}-sonar-scanner
          - name: Install SonarQube scanner
            if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
            shell: powershell
            run: |
              New-Item -Path .\.sonar\scanner -ItemType Directory
              dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
              dotnet tool update dotnet-reportgenerator-globaltool --tool-path .\.sonar\scanner
          - name: Build and analyze
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            shell: powershell
            run: |
             cd Sources/
              ..\.sonar\scanner\dotnet-sonarscanner begin /k:"RamiOpenLibraryWS_Wrapper_Github" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" 
              dotnet build
              dotnet test OpenLibraryWS_Wrapper.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
              ..\.sonar\scanner\reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
              dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
              ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
       needs: build
---
name: CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  hadolint : 
  runs-on: ubuntu-latest
  steps : 
    - uses: hadolint/hadolint:latest-alpine
    - name: Verify DockerFile
       run: hadolint Sources/OpenLibraryWrapper/Dockerfile
  
  
  
  
