# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Deplace to project
      run: cd Sources
    - name: Restore dependencies 
      run: |
        cd Sources
        dotnet restore OpenLibraryWS_Wrapper.sln
    - name: Build
      run: |
        cd Sources
        dotnet build OpenLibraryWS_Wrapper.sln -c Release --no-restore
    - name: Publish 
      run:  |
        cd Sources     
        dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o ./build/release
  
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Deplace to project
      run: cd Sources
    - name: Restore dependencies 
      run: |
        cd Sources
        dotnet restore OpenLibraryWS_Wrapper.sln
    - name: Test
      run: |
        cd Sources
        dotnet test OpenLibraryWS_Wrapper.sln --no-restore
    needs: build
  
  code-inspection:
       runs-on: windows-latest
       steps:
          - name: Set up JDK 11
            uses: actions/setup-java@v1
            with:
              java-version: 1.11
          - uses: actions/checkout@v2
            with:
              fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          - name: Cache SonarQube packages
            uses: actions/cache@v1
            with:
              path: ~\sonar\cache
              key: ${{ runner.os }}-sonar
              restore-keys: ${{ runner.os }}-sonar
          - name: Cache SonarQube scanner
            id: cache-sonar-scanner
            uses: actions/cache@v1
            with:
              path: .\.sonar\scanner
              key: ${{ runner.os }}-sonar-scanner
              restore-keys: ${{ runner.os }}-sonar-scanner
          - name: Install SonarQube scanner
            if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
            shell: powershell
            run: |
              New-Item -Path .\.sonar\scanner -ItemType Directory
              dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
              dotnet tool update dotnet-reportgenerator-globaltool --tool-path .\.sonar\scanner
          - name: Build and analyze
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            shell: powershell
            run: |
             cd Sources/
              ..\.sonar\scanner\dotnet-sonarscanner begin /k:"RamiOpenLibraryWS_Wrapper_Github" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" 
              dotnet build
              dotnet test OpenLibraryWS_Wrapper.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
              ..\.sonar\scanner\reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
              dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
              ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
       needs: build
       
  hadolint: 
        runs-on: ubuntu-latest       
        steps:
         - uses: actions/checkout@v3
         - uses: hadolint/hadolint-action@v3.1.0
           with:
                dockerfile: Sources/OpenLibraryWrapper/Dockerfile
        needs: build

  
    
    # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
    
    
   
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: Sources
          file : ./Sources/OpenLibraryWrapper/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    needs: hadolint
  
      
        
  
