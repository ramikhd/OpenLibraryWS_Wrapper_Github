# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Deplace to project
      run: cd Sources
    - name: Restore dependencies 
      run: |
        cd Sources
        dotnet restore OpenLibraryWS_Wrapper.sln
    - name: Build
      run: |
        cd Sources
        dotnet build OpenLibraryWS_Wrapper.sln -c Release --no-restore
    - name: Publish 
      run:  |
        cd Sources     
        dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o ./build/release
  
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Deplace to project
      run: cd Sources
    - name: Restore dependencies 
      run: |
        cd Sources
        dotnet restore OpenLibraryWS_Wrapper.sln
    - name: Test
      run: |
        cd Sources
        dotnet test OpenLibraryWS_Wrapper.sln --no-restore
    needs: build
  
  code-inspection:
      runs-on: ubuntu-latest
      steps:
        - uses: hub.codefirst.iut.uca.fr/marc.chevaldonne/codefirst-dronesonarplugin-dotnet7@latest
        - name : Deplace to project
          env:
            super_secret: ${{ secrets.SECRET_SONAR_LOGIN }}
          run : |
            cd Sources
            cd Sources/
            dotnet restore OpenLibraryWS_Wrapper.sln
            dotnet sonarscanner begin /k:RamiOpenLibraryWS_Wrapper /d:sonar.host.url=$${PLUGIN_SONAR_HOST} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" /d:sonar.login=$${PLUGIN_SONAR_TOKEN} 
            dotnet build OpenLibraryWS_Wrapper.sln -c Release --no-restore
            dotnet test OpenLibraryWS_Wrapper.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
            reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
            dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
            dotnet sonarscanner end /d:sonar.login="$SECRET_SONAR_LOGIN"
      needs: build

  
  
  
  
