# kind: pipeline
# type: docker
# name: CI


# trigger:
#   event:
#     - push

# steps:
#   - name: build
#     image: mcr.microsoft.com/dotnet/sdk:7.0
#     # volumes:
#     #   - name: docs
#     #     path: /docs
#     commands:
#       - cd Sources
#       - dotnet restore OpenLibraryWS_Wrapper.sln
#       - dotnet build OpenLibraryWS_Wrapper.sln -c Release --no-restore
#       - dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o $CI_PROJECT_DIR/build/release
#       # - dotnet new tool-manifest 
#       # - dotnet tool install --version 6.5.0 Swashbuckle.AspNetCore.Cli
#       # - dotnet swagger tofile --yaml --output /docs/swagger.json OpenLibraryWrapper/bin/Release/net7.0/OpenLibraryWrapper.dll v1

#   - name: tests
#     image: mcr.microsoft.com/dotnet/sdk:7.0
#     commands:
#       - cd Sources/
#       - dotnet restore OpenLibraryWS_Wrapper.sln
#       - dotnet test OpenLibraryWS_Wrapper.sln --no-restore
#     depends_on: [build]
    
  # - name: code-inspection
  #   image: hub.codefirst.iut.uca.fr/marc.chevaldonne/codefirst-dronesonarplugin-dotnet7
  #   secrets: [ SECRET_SONAR_LOGIN ]
  #   settings:
  #     sonar_host: https://codefirst.iut.uca.fr/sonar/
  #     sonar_token:
  #       from_secret: SECRET_SONAR_LOGIN
  #   commands:
  #     - cd Sources/
  #     - dotnet restore OpenLibraryWS_Wrapper.sln
  #     - dotnet sonarscanner begin /k:RamiOpenLibraryWS_Wrapper /d:sonar.host.url=$${PLUGIN_SONAR_HOST} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" /d:sonar.login=$${PLUGIN_SONAR_TOKEN} 
  #     - dotnet build OpenLibraryWS_Wrapper.sln -c Release --no-restore
  #     - dotnet test OpenLibraryWS_Wrapper.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
  #     - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
  #     - dotnet publish OpenLibraryWS_Wrapper.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
  #     - dotnet sonarscanner end /d:sonar.login=$${PLUGIN_SONAR_TOKEN}
  #   depends_on: [build]

  # - name: generate-and-deploy-docs
  #   image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-docdeployer
  #   failure: ignore
  #   volumes:
  #     - name: docs
  #       path: /docs
  #   commands:
  #     - cp /docs/OpenLibraryWrapper.xml .
  #     - /entrypoint.sh
  #   depends_on: [tests]

  

# volumes:
#   - name : docs
#     tmp : {}

# ---

kind: pipeline
type: docker
name: CD


trigger:
  event:
    - push

steps:
  - name : hadolint
    image : hadolint/hadolint:latest-alpine
    commands:
      - hadolint Sources/OpenLibraryWrapper/Dockerfile

  - name: docker-build-and-push
    image: plugins/docker
    settings:
       dockerfile: Sources/OpenLibraryWrapper/Dockerfile
       context: Sources/
       registry: hub.codefirst.iut.uca.fr
       repo: hub.codefirst.iut.uca.fr/rami.khedair/openlibraryws_wrappermyrepository
       username:
         from_secret: SECRET_REGISTRY_USERNAME
       password:
         from_secret: SECRET_REGISTRY_PASSWORD
    depends_on: [hadolint]

  - name: deploy-container-mariadb
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
    environment:
        IMAGENAME: mariadb:10
        CONTAINERNAME: mariadb
        COMMAND: create
        ## OVERWRITE: true
        PRIVATE: false
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_ROOT_PASSWORD:
          from_secret: DB_ROOT_PASSWORD
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_DATABASE:
          from_secret: DB_DATABASE
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_USER:
          from_secret: DB_USER
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_PASSWORD:
          from_secret: DB_PASSWORD
        ADMINS: ramikhedair

  - name: deploy-container
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
    environment:
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_DATABASE:
          from_secret: DB_DATABASE
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_USER:
          from_secret: DB_USER
        CODEFIRST_CLIENTDRONE_ENV_MARIADB_PASSWORD:
          from_secret: DB_PASSWORD
        IMAGENAME: hub.codefirst.iut.uca.fr/rami.khedair/openlibraryws_wrappermyrepository:latest
        CONTAINERNAME: openlibraryws_wrappermyrepository
        COMMAND: create
        OVERWRITE: true
        CODEFIRST_CLIENTDRONE_ENV_SOURCE_DATA : MYDBMARIA
        CODEFIRST_CLIENTDRONE_ENV_DB_PATH : ramikhedair-mariadb
    depends_on: [docker-build-and-push,deploy-container-mariadb]

  

